<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AskPriceMain" xml:space="preserve">
    <value>新的在线询价需要您处理。
客户信息：{0}
昵称：{1}
姓名：{2}
性别：{3}
客户类型：{4}
联络方式：{5}
询价车型：{6}
计划购车时间： {7}
请回复相关数字进行下一步操作：
【1】开始聊天 
【2】查看订单 
【3】查看快捷回复消息指令 
【4】结束聊天 
【5】确认订单</value>
    <comment>推送给售前客服询价单的主菜单信息</comment>
  </data>
  <data name="ConsultMain1" xml:space="preserve">
    <value>有新的在线咨询消息需要处理。
客户信息：{0}
昵称：{1}
姓名：{2}
性别：{3}
联络方式：{4}
客户类型：{5}
车型：{6}
请回复相关数字进行下一步操作：
1.开始聊天 
2.订单详情 
3.快捷回复消息指令 
4.结束聊天 
5.确认订单 
6.转给服务顾问
如无需聊天请直接回复4结束聊天</value>
    <comment>推送给售后客服咨询单的主菜单信息</comment>
  </data>
  <data name="ConsultMain2" xml:space="preserve">
    <value>新的在线咨询需要您处理。
客户信息：{0}
昵称：{1}
姓名：{2}
性别：{3}
客户类型：{4}
联络方式：{5}
咨询车型：{6}
计划购车时间： {7}
请回复相关数字进行下一步操作：
【1】开始聊天 
【2】查看订单 
【3】查看快捷回复消息指令 
【4】结束聊天 
【5】确认订单</value>
    <comment>推送给售前客服咨询单的主菜单信息</comment>
  </data>
  <data name="DriveMain" xml:space="preserve">
    <value>新的试驾预约需要您处理。
预约试驾信息：
昵称：{0}
姓名：{1}
性别：{2}
客户类型：{3}
联络方式：{4}
试驾车型：{5}
计划购车时间：{6}
预约试驾时间： {7}
请回复相关数字进行下一步操作：
【1】开始聊天 
【2】查看订单 
【3】查看快捷回复消息指令 
【4】结束聊天 
【5】确认订单</value>
    <comment>推送给售前客服试驾单的主菜单信息</comment>
  </data>
  <data name="Input1Error1" xml:space="preserve">
    <value>已有其他工作人员在处理</value>
    <comment>客服输入1，单据已被处理回复的消息</comment>
  </data>
  <data name="Input1Error2" xml:space="preserve">
    <value>已超过48小时无法与客户进行聊天</value>
    <comment>客服输入1，客户超时回复的消息</comment>
  </data>
  <data name="Input1Success" xml:space="preserve">
    <value>可以开始对话，请输入文字或图片进行聊天。</value>
    <comment>客服输入1回复的消息</comment>
  </data>
  <data name="Input2AskPrice" xml:space="preserve">
    <value>询价客户信息：
昵称：{0}
姓名：{1}
性别：{2}
客户类型：{3}
联络方式：{4}
询价车型：{5}
计划购车时间：{6}</value>
    <comment>客服输入2回复的消息:询价</comment>
  </data>
  <data name="Input2Consult" xml:space="preserve">
    <value>客户信息：
昵称：{0}
姓名：{1}
性别：{2}
客户类型：{3}
联络方式：{4}</value>
    <comment>客服输入2回复的消息:咨询</comment>
  </data>
  <data name="Input2Drive" xml:space="preserve">
    <value>预约试驾订单信息：
昵称：{0}
姓名：{1}
性别：{2}
联络方式：{3}
试驾车型：{4}
计划购车时间：{5}
预约试驾时间：{6}</value>
    <comment>客服输入2回复的消息:试驾</comment>
  </data>
  <data name="Input2Maintance" xml:space="preserve">
    <value>预约保养订单信息：
昵称：{0}
姓名：{1}
性别：{2}
客户类型：{3}
联络方式：{4}
车型：{5}
车牌号：{6}
上次保养时间：{7}
上次保养公里数：{8}
预约时间：{9}
保养项目：{10}</value>
    <comment>客服输入2回复的消息:保养</comment>
  </data>
  <data name="Input2Repair" xml:space="preserve">
    <value>预约维修订单信息：
昵称：{0}
姓名：{1}
性别：{2}
客户类型：{3}
联络方式：{4}
车型：{5}
车牌号：{6}
维修原因：{7}</value>
    <comment>客服输入2回复的消息:维修</comment>
  </data>
  <data name="MaintanceMain" xml:space="preserve">
    <value>有新的保养订单消息需要处理。
客户信息：{0}
姓名：{1}
性别：{2}
客户类型：{3}
联络方式：{4}
车型：{5}
车牌号：{6}
上次保养时间：{7}
上次保养公里数：{8}
预约保养时间：{9}
保养项目：{10}
请回复相关数字进行下一步操作：
1.开始聊天 
2.订单详情 
3.快捷回复消息指令 
4.结束聊天 
5.确认订单  
6.转给服务顾问
如无需聊天请回复4结束聊天再回复5确认订单。</value>
    <comment>推送给售后客服保养单的主菜单信息</comment>
  </data>
  <data name="RepairMain" xml:space="preserve">
    <value>有新的维修订单消息需要处理。
客户信息：{0}
姓名：{1}
性别：{2}
客户类型：{3}
联络方式：{4}
车型：{5}
车牌号：{6}
维修原因：{7}
请回复相关数字进行下一步操作：
1.开始聊天 
2.订单详情 
3.快捷回复消息指令 
4.结束聊天 
5.确认订单  
6.转给服务顾问
如无需聊天请回复4结束聊天再回复5确认订单。</value>
    <comment>推送给售后客服维修单的主菜单信息</comment>
  </data>
</root>